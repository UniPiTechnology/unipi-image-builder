#!/bin/sh

unipi_password_set() {
    PWD_HASH_SET=$1
    
    if [ "$PWD_HASH_SET" = "legacy" ]; then
	# shellcheck disable=SC2016 # $ is supposed to be in the hash
        usermod ${USER_TARGET} -p '$y$j9T$pi9lbl3bLQsb2OYu5G/7d1$7A8hVYSxM.RSbyaSbVNSvKrf2Eh3woivl2SE1gfFl79'
    else
        usermod ${USER_TARGET} -p "$PWD_HASH_SET"
    fi
    
    if [ "$2" = "1" ]; then
        passwd -e ${USER_TARGET} >/dev/null
    fi
}

unipi_sn_check() {
    # Return codes:
    # 0 - new SN
    # 1 - invalid SN
    # 2 - old SN
    
    UNIPI_SN=$1
    
    case "$UNIPI_SN" in
        ''|*[!0-9]*)
            return 1
        ;;
        *)
            :
        ;;
    esac
    
    if [ "$UNIPI_SN" -lt 0 ]; then return 1
    elif [ "$UNIPI_SN" -lt 1253800000 ]; then return 2
    elif [ "$UNIPI_SN" -lt 2000000000 ]; then return 0
    elif [ "$UNIPI_SN" -lt 2253800000 ]; then return 2
    else return 0
    fi
}

unipi_hash_set() {

    GPP="/dev/mmcblk0gp0" # todo: get this from symlink
    GPPMT="/run/unipi-plc/gpp-factory"

    if [ ! -b "$GPP" ]; then
        echo "Error: GPP does not exist."
        return 1
    fi

    if ! mount -o ro,noload $GPP $GPPMT --mkdir; then
        echo "Error: GPP not formated."
        return 1
    fi

    pwd=""
    force_change=""
    if [ -f $GPPMT/PWD_HASH_USER ]; then
        pwd="$(cat $GPPMT/PWD_HASH_USER)"
    fi
    if [ -z "$pwd" ] && [ -f $GPPMT/PWD_HASH_FACTORY ]; then
        pwd="$(cat $GPPMT/PWD_HASH_FACTORY)"
        force_change="1"
    fi
    if [ -n "$pwd" ]; then
        unipi_password_set "$pwd" "$force_change"
    else
        echo "Error: no password for user unipi specified in image or GPP."
    fi
    umount $GPPMT && rmdir $GPPMT
    if [ -z "$pwd" ]; then
        return 1
    fi
    return 0
}


USER_TARGET="unipi"
USER_LINE=$(getent shadow "${USER_TARGET}")

# Check if user unipi exists
if [ -z "$USER_LINE" ]; then
    exit
fi

PWD_HASH_OLD=$(echo "$USER_LINE" | cut -d ":" -f2)

# Check if a valid password is provided already
case "$PWD_HASH_OLD" in
    ""|"!"|"!!"|"*")
        :
    ;;
    *)
        exit
    ;;
esac

if unipi_hash_set; then
    exit 0
fi

UNIPI_SN="$(cat /run/unipi-plc/unipi-id/product_serial)"
unipi_sn_check "$UNIPI_SN"

case "$?" in
    "0")
    ;;
    "1")
        echo "Error: Invalid SN, no password is set for user unipi."
	exit 1
    ;;
    "2")
        unipi_password_set "legacy" "1"
    ;;
esac
